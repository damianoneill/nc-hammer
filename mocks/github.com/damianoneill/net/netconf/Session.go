// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import netconf "github.com/damianoneill/net/netconf"

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Session) Close() {
	_m.Called()
}

// Execute provides a mock function with given fields: req
func (_m *Session) Execute(req netconf.Request) (*netconf.RPCReply, error) {
	ret := _m.Called(req)

	var r0 *netconf.RPCReply
	if rf, ok := ret.Get(0).(func(netconf.Request) *netconf.RPCReply); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netconf.RPCReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(netconf.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteAsync provides a mock function with given fields: req, rchan
func (_m *Session) ExecuteAsync(req netconf.Request, rchan chan *netconf.RPCReply) error {
	ret := _m.Called(req, rchan)

	var r0 error
	if rf, ok := ret.Get(0).(func(netconf.Request, chan *netconf.RPCReply) error); ok {
		r0 = rf(req, rchan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Session) ID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Subscribe provides a mock function with given fields: req, nchan
func (_m *Session) Subscribe(req netconf.Request, nchan chan *netconf.Notification) (*netconf.RPCReply, error) {
	ret := _m.Called(req, nchan)

	var r0 *netconf.RPCReply
	if rf, ok := ret.Get(0).(func(netconf.Request, chan *netconf.Notification) *netconf.RPCReply); ok {
		r0 = rf(req, nchan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netconf.RPCReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(netconf.Request, chan *netconf.Notification) error); ok {
		r1 = rf(req, nchan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
